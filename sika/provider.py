__all__ = ["Provider", "ContinuousProvider", "ProviderMiddleware"]

from typing import Generic, TypeVar, Union
from abc import ABC, abstractmethod
from typing import List, Dict, Tuple, Any, Collection, final
import numpy as np

from .task import Task, IntermediateTask
from .product import Product
from .utils import NodeSpec, NodeShape

T = TypeVar('T', bound=Union[Product, Collection[Product]], covariant=True)

class Provider(Generic[T], Task):
    """ A :py:class:`~sika.task.Task` that creates / provides a :py:class:`~sika.product.Product` of type ``T`` when called with parameters. These are the core building blocks of a modeling pipeline. Many Providers that are intermediate steps in a pipeline (e.g. not the first) will also subclass type :py:class:`~sika.task.IntermediateTask` and use outputs from preceding Providers in their :py:class:`~sika.product.Product` creation."""
    
    @property
    @abstractmethod
    def provided_parameters(self) -> Dict[str, List[Any]]:
        """ A dictionary of keyword parameters and their possible values for which this :py:class:`~Provider` can provide a :py:class:`~sika.product.Product`"""
    
    @final
    def __call__(self, parameters:Dict[str, Any]) -> T:
        """Get a :py:class:`~sika.product.Product` of type ``T`` corresponding to the dictionary of keyword parameters provided. See each :py:class:`~Provider`'s :py:attr:`~Provider.provided_parameters` property to see what parameters are valid arguments.
        
        .. warning::
            Should not be overridden - when writing tasks, implement Provider._call instead.

        :param parameters: a dictionary of values that will be used when procuring the output Product. must provide a value for each keyword in this :py:class:`~Provider`'s :py:attr:`~Provider.provided_parameters`
        :type parameters: Dict[str, Any]
        :return: a :py:class:`~sika.product.Product` of type ``T``
        """
        assert self.config is not None, "Provider must have been configured with a config before calling. This could be done by passing config and logger arguments to the constructor of this task or any task downstream of it, or by calling either of their configure() methods"
        return self._call(parameters)
    
    def node_spec(self) -> NodeSpec:
        """ Return a :py:class:`~.NodeSpec` for this task. Used for model structure visualization. """
        return NodeSpec(
            label=self.__class__.__name__,
            shape=NodeShape.RECT,
            color='#71F4B0',
            ID = self.ID
        )
    
    @abstractmethod
    def _call(self, parameters:Dict[str, Any]) -> T:
        """ **Do not call directly** - use :py:meth:`~sika.provider.Provider.__call__` instead. This method is overridden by subclasses to actually implement functionality for this :py:class:`~sika.provider.Provider`. Bypasses config check. """
    
    
class ContinuousProvider(Provider[T], Task, ABC):
    """ A :py:class:`~Provider` that can create/provide a :py:class:`~product.Product` from continuous parameters instead of a discrete grid."""
    @property
    @abstractmethod
    def provided_parameters(self) -> Dict[str, Tuple[int,int]]:
        """ A dictionary of parameter names and their upper and lower bounds within which this provider can provide models."""
     
    
class ProviderMiddleware(IntermediateTask[Provider[T]], Provider[T], ABC):
    """ Middleware layer that can modify, validate, visualize, checkpoint, etc a :py:class:`~.product.Product`. This layer is transparent and fits into a pipeline identically to a normal :py:class:`~Provider` that provides a :py:class:`~.product.Product` of type ``T``. Because of this, :py:class:`~ProviderMiddleware` can wrap other :py:class:`~ProviderMiddleware` layers to stack functionality."""
    
    @property
    def provided_parameters(self) -> Dict[str, List[Any]]:
        """A dictionary of keyword parameters and their possible values for which this :py:class:`~Provider` can provide a :py:class:`~sika.product.Product`
        
        :rtype: Dict[str, List[Any]]
        """
        return self.prev.provided_parameters

    def parameter_middleware(self, parameters:Dict[str, Any]) -> Dict[str, Any]:
        """Middleware function to modify the parameters that will be passed to the wrapped :py:class:`~Provider`

        :param parameters: the parameters to be passed to the next layer, before modification
        :type parameters: Dict[str, Any]
        :return: the parameters that will be passed to the next layer, after modification
        :rtype: Dict[str, Any]
        """
        return parameters
    
    def product_middleware(self, prod:T) -> T:
        """Middleware function to modify or validate :py:class:`~sika.product.Product` s after they are generated by the provider. 

        :param prod: the :py:class:`~sika.product.Product` generated by the previous layer
        :type model: :py:class:`~sika.product.Product`
        :return: a modified version of the input product
        """
        return prod
    
    def _call(self, parameters:Dict[str, Any]) -> T:
        """Apply the middleware to the parameters, use them to call the next :py:class:`~Provider`, then apply middleware to the resulting :py:class:`~product.Product` and return it

        :param parameters: parameters for the next layer. These may be modified by the :py:meth:`~.parameter_middleware` method of this :py:class:`~ProviderMiddleware` layer.
        :type parameters: _type_
        :return: A :py:class:`~sika.product.Product` produced by a previous layer. May be modified by the :py:meth:`~.product_middleware` method of this :py:class:`~ProviderMiddleware` layer.
        """
        parameters = self.parameter_middleware(parameters)
        model = self.prev(parameters)
        return self.product_middleware(model)
    
    def node_spec(self) -> NodeSpec:
        """ Return a :py:class:`~.NodeSpec` for this task. Used for model structure visualization. """
        return NodeSpec(
            label=self.__class__.__name__,
            shape=NodeShape.CIRCLE,
            color='#71B6F4',
            ID = self.ID,
            edge_weight=1
        )
    
